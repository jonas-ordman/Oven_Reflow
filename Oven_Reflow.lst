0000              1   ; Blinky_Int.asm: blinks LEDR0 of the DE2-8052 each second.
0000              2   ; Also generates a 2kHz signal at P0.0 using timer 0 interrupt.
0000              3   ; Also keeps a BCD counter using timer 2 interrupt.
0000              4   
0000              5   
0000              6   CLK                EQU 33333333
0000              7   FREQ_0             EQU 2000
0000              8   FREQ_2             EQU 100
0000              9   TIMER0_RELOAD EQU 65536-(CLK/(12*2*FREQ_0))
0000             10   TIMER2_RELOAD EQU 65536-(CLK/(12*FREQ_2))
0000             11   CE_ADC             EQU p0.3
0000             12   SCLK               EQU p0.2
0000             13   MOSI               EQU P0.1
0000             14   MISO               EQU p0.0
0000             15   
0000             16   org 0000H
0000 0203F4      17            ljmp myprogram
0003             18            
000B             19   org 000BH
000B 0203DE      20            ljmp ISR_timer0
000E             21            
002B             22   org 002BH
002B 02039E      23            ljmp ISR_timer2
002E             24   
0030             25   DSEG at 30H
0030             26   BCD_count        :  ds 1
0031             27   Cnt_10ms         :  ds 1
0032             28   State_Sec        :  ds 1
0033             29   Seconds          :  ds 1
0034             30   Minutes          :  ds 1
0035             31   Pulse       :  ds 1
0036             32   Temperature :  ds 1
0037             33   State       :  ds 1
0038             34   x                        :  ds 4
003C             35   y                        :  ds 4
0040             36   bcd                      :  ds 5
0045             37   
0000             38   BSEG
0000             39   mf                       :  dbit 1
0001             40   
                 -1   $include(math32.asm)
                546   $LIST
                 -1   $include(LCD_Display.asm)
0394             43   
0394             44   CSEG
0394             45   
0394             46   ; Look-up table for 7-segment displays
0394             47   myLUT:
0394 C0F9A4B0    48       DB 0C0H, 0F9H, 0A4H, 0B0H, 099H
     99
0399 9282F880    49       DB 092H, 082H, 0F8H, 080H, 090H
     90
039E             50   
039E             51   ISR_timer2:
039E C0D0        52            push psw
03A0 C0E0        53            push acc
03A2 C082        54            push dpl
03A4 C083        55            push dph
03A6             56            
03A6 C2CF        57            clr TF2
03A8 B281        58            cpl P0.1
03AA             59            
03AA E531        60            mov a, Cnt_10ms
03AC 04          61            inc a
03AD F531        62            mov Cnt_10ms, a
03AF             63            
03AF B46420      64            cjne a, #100, do_nothing
03B2             65            
03B2 753100      66            mov Cnt_10ms, #0
03B5             67            
03B5             68   ;State_Sec    The seconds for State Transitions
03B5 E532        69            mov a, State_Sec
03B7 04          70            inc a
03B8 F532        71            mov State_Sec, a
03BA             72            
03BA             73   ;Seconds                 Can use this timer incase we decide to have a clock 
03BA E533        74            mov a, Seconds
03BC 04          75            inc a
03BD D4          76            da a
03BE F533        77            mov Seconds, a
03C0 B4600F      78            cjne a,#60H,do_nothing
03C3 753300      79            mov Seconds,#0
03C6             80            
03C6             81   ;Minutes
03C6 E534        82            mov a,Minutes
03C8 04          83            inc a
03C9 D4          84            da a
03CA F534        85            mov Minutes,a
03CC B46003      86            cjne a,#60H,do_nothing
03CF 753400      87            mov Minutes,#0
03D2             88            
03D2             89   do_nothing:
03D2 120494      90            lcall update_display  ;Updates display on Hex to display current time
03D5 D083        91            pop dph
03D7 D082        92            pop dpl
03D9 D0E0        93            pop acc
03DB D0D0        94            pop psw
03DD             95            
03DD 32          96            reti
03DE             97   
03DE             98            
03DE             99   ISR_timer0:
03DE B280       100            cpl P0.0
03E0 758CFD     101       mov TH0, #high(TIMER0_RELOAD)
03E3 758A4A     102       mov TL0, #low(TIMER0_RELOAD)
03E6 32         103            reti
03E7            104            
03E7            105   ;For a 33.33MHz clock, one cycle takes 30ns
03E7            106   WaitHalfSec:
03E7 7A5A       107            mov R2, #90
03E9 79FA       108   L3: mov R1, #250
03EB 78FA       109   L2: mov R0, #250
03ED D8FE       110   L1: djnz R0, L1
03EF D9FA       111            djnz R1, L2
03F1 DAF6       112            djnz R2, L3
03F3 22         113            ret
03F4            114            
03F4            115   myprogram:  ; Set inputs/outputs depending on what whoever does the board solders 
03F4 75817F     116            mov SP, #7FH
03F7 75E800     117            mov LEDRA,#0
03FA 759500     118            mov LEDRB,#0
03FD 759E00     119            mov LEDRC,#0
0400 75F800     120            mov LEDG,#0
0403 753600     121            mov Temperature,#0
0406 753200     122            mov State_Sec,#0
0409 753300     123            mov Seconds,#0
040C 753400     124            mov Minutes,#0
040F 753700     125            mov State,#0
0412            126            
0412            127            
0412 D2DB       128            setb LCD_ON  ;All this code is to prep the LCD
0414 D2DC       129            setb LCD_blON
0416 C2D9       130       clr LCD_EN  ; Default state of enable must be zero
0418 12029E     131       lcall Wait40us
041B 75DAFF     132       mov LCD_MOD, #0xff ; Use LCD_DATA as output port
041E C2D8       133       clr LCD_RW ;  Only writing to the LCD in this code.
0420 740C       134            mov a, #0ch ; Display on command
0422 1202A9     135            lcall LCD_command
0425 7438       136            mov a, #38H ; 8-bits interface, 2 lines, 5x7 characters
0427 1202A9     137            lcall LCD_command
042A 7401       138            mov a, #01H ; Clear screen (Warning, very slow command!)
042C 1202A9     139            lcall LCD_command
042F            140            
042F            141            
042F 759A03     142            mov P0MOD, #00000011B ; P0.0, P0.1 are outputs.  P0.1 is used for testing Timer 2!
0432 D280       143            setb P0.0
0434 439A38     144            orl P0MOD, #00111000b ; make all CEs outputs  
0437 439DFF     145       orl P3MOD, #11111111b ; make all CEs outputs 
043A 439A08     146            orl p0mod,#00001000b
043D 1204B6     147            lcall INI_SPI
0440            148   
0440 758901     149       mov TMOD,  #00000001B ; GATE=0, C/T*=0, M1=0, M0=1: 16-bit timer
0443 C28C       150            clr TR0 ; Disable timer 0
0445 C28D       151            clr TF0
0447 758CFD     152       mov TH0, #high(TIMER0_RELOAD)
044A 758A4A     153       mov TL0, #low(TIMER0_RELOAD)
044D D28C       154       setb TR0 ; Enable timer 0
044F D2A9       155       setb ET0 ; Enable timer 0 interrupt
0451            156       
0451            157           
0451 75C800     158       mov T2CON, #00H ; Autoreload is enabled, work as a timer
0454 C2CA       159       clr TR2
0456 C2CF       160       clr TF2
0458            161       ; Set up timer 2 to interrupt every 10ms
0458 75CB93     162       mov RCAP2H,#high(TIMER2_RELOAD)
045B 75CA7F     163       mov RCAP2L,#low(TIMER2_RELOAD)
045E D2CA       164       setb TR2
0460 D2AD       165       setb ET2
0462            166       
0462 753000     167       mov BCD_count, #0
0465 753100     168       mov Cnt_10ms, #0
0468            169        
0468 D2AF       170       setb EA  ; Enable all interrupts
046A            171   
046A            172   M0:                      ;The pins here will need to be changed depending on what whoever made the board decided to use.
046A B2E8       173            cpl LEDRA.0
046C C2B7       174            clr p3.7
046E C283       175            clr CE_ADC
0470 7801       176            mov R0,#00000001B ; Start bit:1
0472 1204BF     177            lcall DO_SPI_G
0475 7880       178            mov R0,#10000000B ; Single ended, read channel 0
0477            179            
0477 1204BF     180            lcall DO_SPI_G
047A E9         181            mov a, R1 ; R1 contains bits 8 and 9
047B 5403       182            anl a, #03H ; Make sure other bits are zero
047D F539       183            mov x+1,a
047F F595       184            mov LEDRB, a ; Display the bits
0481            185            
0481 7855       186            mov R0, #55H ; It doesn't matter what we transmit...
0483 1204BF     187            lcall DO_SPI_G
0486 89E8       188            mov LEDRA, R1 ; R1 contains bits 0 to 7
0488 8938       189            mov x+0,r1
048A D283       190            setb CE_ADC
048C 1203E7     191            lcall WaitHalfSec
048F 120511     192            lcall State_Transition
0492 80D6       193            sjmp M0
0494            194            
0494            195   Update_Display: 
0494            196   ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
0494            197   ;                        Update the Display for the Clock 
0494            198   ;
0494            199   ;                        It also currently displays the variable I'm using for state transitions so its going to jump all over the place
0494            200   ;                        Just plug in Seconds instead of State_Seconds and it will work
0494            201   ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
0494            202   
0494            203   
0494 900394     204            mov dptr, #myLUT
0497            205   ; Display State_Sec 0
0497 E533       206       mov A,Seconds
0499 540F       207       anl A, #0FH
049B 93         208       movc A, @A+dptr
049C F593       209       mov HEX2, A
049E            210   ; Display State_Sec 1
049E E533       211            mov A,Seconds
04A0 C4         212       swap A
04A1 540F       213       anl A, #0FH
04A3 93         214       movc A, @A+dptr
04A4 F594       215       mov HEX3, A  
04A6            216   ;Display Minutes 0
04A6 E534       217            mov A,Minutes
04A8 540F       218            anl A, #0FH
04AA 93         219       movc A, @A+dptr
04AB F58E       220       mov HEX4, A
04AD            221   ;Display Minutes 1
04AD E534       222            mov A,Minutes
04AF C4         223       swap A
04B0 540F       224       anl A, #0FH
04B2 93         225       movc A, @A+dptr
04B3 F58F       226       mov HEX5, A  
04B5            227       
04B5 22         228       ret
04B6            229       
04B6            230   INI_SPI:
04B6 439A06     231            orl P0MOD,#00000110b ; Set SCLK, MOSI as outputs
04B9 539AFE     232            anl P0MOD,#11111110b ; Set MISO as input
04BC C282       233            clr SCLK ; Mode 0,0 default
04BE 22         234            ret
04BF            235   
04BF            236   DO_SPI_G:
04BF 7900       237            mov R1,#0 ; Received byte stored in R1
04C1 7A08       238            mov R2,#8 ; Loop counter (8-bits)
04C3            239   
04C3            240   DO_SPI_G_LOOP:
04C3 E8         241            mov a, R0 ; Byte to write is in R0
04C4 33         242            rlc a ; Carry flag has bit to write
04C5 F8         243            mov R0, a
04C6 9281       244            mov MOSI, c
04C8 D282       245            setb SCLK ; Transmit
04CA A280       246            mov c, MISO ; Read received bit
04CC E9         247            mov a, R1 ; Save received bit in R1
04CD 33         248            rlc a
04CE F9         249            mov R1, a
04CF C282       250            clr SCLK
04D1 DAF0       251            djnz R2, DO_SPI_G_LOOP
04D3 22         252            ret
04D4            253   
04D4            254   Correct_Voltage:  ;Turns the LM355 voltage output into the current temperature 100*(Vout-2.73) Vout=(ADC/1023)*5
04D4            255                                      ; For oven reflow project Find out the conversion from the Hot junction and add here
04D4 753CF4     256            mov y+0, #low (500 % 0x10000) 
04D7 753D01     256            mov y+1, #high(500 % 0x10000) 
04DA 753E00     256            mov y+2, #low (500 / 0x10000) 
04DD 753F00     256            mov y+3, #high(500 / 0x10000) 
04E0 1201A8     257            lcall mul32
04E3            258            
04E3 753C64     259            mov y+0, #low (100 % 0x10000) 
04E6 753D00     259            mov y+1, #high(100 % 0x10000) 
04E9 753E00     259            mov y+2, #low (100 / 0x10000) 
04EC 753F00     259            mov y+3, #high(100 / 0x10000) 
04EF 1201A8     260            lcall mul32
04F2            261            
04F2 753CFF     262            mov y+0, #low (1023 % 0x10000) 
04F5 753D03     262            mov y+1, #high(1023 % 0x10000) 
04F8 753E00     262            mov y+2, #low (1023 / 0x10000) 
04FB 753F00     262            mov y+3, #high(1023 / 0x10000) 
04FE 120235     263            lcall div32
0501            264            
0501 753CA4     265            mov y+0, #low (27300 % 0x10000) 
0504 753D6A     265            mov y+1, #high(27300 % 0x10000) 
0507 753E00     265            mov y+2, #low (27300 / 0x10000) 
050A 753F00     265            mov y+3, #high(27300 / 0x10000) 
050D 120114     266            lcall sub32 
0510            267            
0510 22         268            ret
0511            269            
0511            270            
0511            271   State_Transition:  ;Function made to transition states, call it in the main when you want to check the current state/change to another 
0511            272                                   ; Alternitivly move it into an interupt, im not positive how this is going to function yet.  
0511 1202CF     273            lcall Current_State
0514 E537       274            mov a, State ;Moves state into a
0516            275            
0516            276   State0:  ;Functionality for state 0
0516 B40018     277            cjne a,#0,State1
0519 753200     278            mov State_Sec,#0
051C 753500     279            mov Pulse,#0
051F 20F92F     280            jb Key.1,Continue_in_State
0522 30F9FD     281            jnb Key.1,$
0525 753200     282            mov State_Sec,#0
0528 753701     283            mov State,#1
052B 12034D     284            lcall Not_Safe_To_Remove
052E 02046A     285            ljmp M0
0531            286            
0531            287   State1:  ;Functionality for state 1
0531 B40124     288            cjne a,#1,State2
0534 753564     289            mov Pulse,#100
0537 7496       290            mov a,#150
0539 C3         291            clr c
053A 9536       292            subb a,Temperature
053C 5006       293            jnc State1_Abort
053E 753702     294            mov State,#2
0541 02046A     295            ljmp M0
0544            296   
0544            297   State1_Abort: ;Checks if 60 seconds pass before Thermocouple hits 50 Degrees
0544 743C       298            mov a,#60
0546 C3         299            clr c
0547 9532       300            subb a,State_Sec
0549 5006       301            jnc Continue_in_State
054B 753705     302            mov state,#5
054E 02046A     303            ljmp M0
0551            304   
0551            305   Continue_in_State:  ;The exit state test failed, Machine will continue in current state its in the middle so that its in range of everything
0551 20FA03     306            jb Key.2,Dont_Abort     ; Also checks if user wants to cancel the reflow process 
0554 753705     307            mov State,#5
0557            308   Dont_Abort:
0557 22         309            ret
0558            310            
0558            311                     
0558            312   State2: ;Functionality for state 2
0558 B40210     313            cjne a,#2,State3
055B 753514     314            mov Pulse,#20
055E 743C       315            mov a,#60
0560 C3         316            clr c
0561 9532       317            subb a,State_Sec
0563 50EC       318            jnc Continue_in_State
0565 753703     319            mov State,#3
0568 02046A     320            ljmp M0
056B            321   
056B            322   State3:  ;Functionality for state 3
056B B40313     323            cjne a,#3,State4
056E 753564     324            mov Pulse,#100
0571 753200     325            mov State_Sec,#0
0574 74DC       326            mov a,#220
0576 C3         327            clr c
0577 9536       328            subb a,Temperature
0579 50D6       329            jnc Continue_in_State
057B 753704     330            mov State,#4
057E 02046A     331            ljmp M0
0581            332            
0581            333   State4:  ;Functionality for state 4
0581 B40410     334            cjne a,#4,State5
0584 753514     335            mov Pulse,#20
0587 742D       336            mov a,#45
0589 C3         337            clr c
058A 9532       338            subb a,State_Sec
058C 50C3       339            jnc Continue_in_State
058E 753704     340            mov State,#4
0591 02046A     341            ljmp M0
0594            342            
0594            343   State5:  ;Functionality for state 5  (State 5 waits to see if temperature is below 60 Degrees to see if its safe to remove 
0594            344                    ;All abort commands revert to state 5 so they can give the oven time to cool down before you pull it out
0594            345                    ;Because The Temperature sensor is not plugged in yet its going to jump from state 5 to 0 instantly
0594 B405BA     346            cjne a,#5,Continue_in_State
0597 753500     347            mov Pulse,#0
059A E536       348            mov a,Temperature
059C C3         349            clr c
059D 943C       350            subb a,#60
059F 50B0       351            jnc Continue_in_State
05A1 753700     352            mov State,#0
05A4 120301     353            lcall Safe_to_Remove
05A7 02046A     354            ljmp M0
05AA            355   
05AA 22         356            ret     
05AB            357   END
